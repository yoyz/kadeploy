.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DUKE-VMLINUZ 1"
.TH DUKE-VMLINUZ 1 "2008-02-05" "perl v5.8.8" "Kadeploy commands"
.SH "NAME"
duke\-vmlinuz \- kadeploy deployment kernel.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This kernel comes with an associated initrd file: duke\-intrd. It should be booted through \s-1PXE\s0 on the nodes at the begining of every deployment to allow kadeploy to initiate and then follow the deployment process. 
.SH "LAUNCH CONFIGURATION"
.IX Header "LAUNCH CONFIGURATION"
Launching configuration is done in the /etc/kadeploy/deploy_cmd.conf file in the \fBdeployboot\fR lines. Please refer to the deploy_cmd.conf man page. 
.SH "CUSTOM KERNEL PARAMETERS"
.IX Header "CUSTOM KERNEL PARAMETERS"
The idea behind the kernel parameters is to give all the information necessary to configure one network interface per node.
.IP "\fB\s-1ETH_DRV\s0\fR=kernel module" 4
.IX Item "ETH_DRV=kernel module"
Name of the kernel driver to load to support network adapter on the node (tg3, e1000....).
.IP "\fB\s-1ETH_DEV\s0\fR=device name" 4
.IX Item "ETH_DEV=device name"
Name of the interface to use, by default \fBeth0\fR. This is in case there are multiple interfaces on the node using the same network driver. In that case, if it is not eth0, you have to specify the right name.
.IP "\fB\s-1NETMASK\s0\fR=network_netmask \fB\s-1IPADDR\s0\fR=ip_adress \fB\s-1BROADCAST\s0\fR=broadcast_address" 4
.IX Item "NETMASK=network_netmask IPADDR=ip_adress BROADCAST=broadcast_address"
This is for network configuration, if not using \s-1DHCP\s0. By default, all the network configuration is made with \s-1DHCP\s0, but you can overwrite it with those parameters. This can be usefull for tests or to delegate the deployment of the nodes to another kadeploy server. Broadcast address has a \fI255.255.255.255\fR default value and the defautl netmask is \fI255.255.255.0\fR.
.SH "STANDARD KERNEL PARAMETERS"
.IX Header "STANDARD KERNEL PARAMETERS"
All the standards linux kernel parameters are available, but the ones described in this section are important.
.IP "\fBconsole=tty0 console=ttyS0,38400n8\fR" 4
.IX Item "console=tty0 console=ttyS0,38400n8"
This part is to configure the console redirection according to your dedicated hardware. Please refer to your hardware specifications and linux documentation to determine the suitable syntax to your needs.
.IP "\fBramdisk_size=50000\fR" 4
.IX Item "ramdisk_size=50000"
This is to determine the size of the ramdisks used during the deployment process by the kernel. For kadeploy 2.1.5 this should be 50000 Mo.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Those examples could be used in the labels of the /etc/kadeploy/deploy.conf file.
.IP "\fBduke\-vmlinuz:duke\-initrd ETH_DRV=tg3 ETH_DEV=eth1 console=tty0 console=ttyS0,38400n8 ramdisk_size=50000\fR" 4
.IX Item "duke-vmlinuz:duke-initrd ETH_DRV=tg3 ETH_DEV=eth1 console=tty0 console=ttyS0,38400n8 ramdisk_size=50000"
This configuration tells the deployment kernel to use \fIeth1\fR of the hardware controled by the \fItg3\fR linux driver, with a \fI50000\fR Mb ramdisk and a console written on both the remote attached screen and duplicated on the first external rs232 connector (\fIttyS0\fR in the case of our system) at \fI38400\fR bauds, since it is attached to a remote kvm (available through kaconsole).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdeploy_cmd.conf\fR\|(1), \fIdeploy.conf\fR\|(1)
.SH "COPYRIGHTS"
.IX Header "COPYRIGHTS"
This software is licensed under the \s-1GNU\s0 Library General Public License. There is \s-1NO\s0 warranty; not even for \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
