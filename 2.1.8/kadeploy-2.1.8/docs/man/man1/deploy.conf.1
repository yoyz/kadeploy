.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DEPLOY.CONF 1"
.TH DEPLOY.CONF 1 "2008-02-05" "perl v5.8.8" "Kadeploy commands"
.SH "NAME"
deploy.conf \- kadeploy configuration file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file presents all the variables the user must defined in order to be able to use the deployment system. It is divided into several sections. A very short description is available  for  each  variable  and often example values are given in commentary.
.SH "NODES PROPERTIES"
.IX Header "NODES PROPERTIES"
This section is dedicated to the cluster specifics optimizations, all the timeouts are set there, and since they depend of hardware configuration, they are difficult to guess. Kadeploy incorporates default values that work on poorly tuned cluster nodes but, volontary, not with default \s-1BIOS\s0 values and its poor performances. This is to force sysadmin to think about their default setup.
.IP "\fBdefault_target_device\fR sda" 4
.IX Item "default_target_device sda"
Default target device on the nodes if no '\-d' is passed to kadeploy.
.IP "\fBdefault_target_partition\fR 3" 4
.IX Item "default_target_partition 3"
Default target partition on the nodes if no '\-p' is passed to kadeploy.
.IP "\fBfirst_check_timeout\fR 210" 4
.IX Item "first_check_timeout 210"
Timeout before ordering a hard reboot, after a soft one at the beginning if the node is still not booted on the deployment kernel.
.IP "\fBlast_check_timeout\fR 250" 4
.IX Item "last_check_timeout 250"
Timout for the last check, when rebooting the nodes on the deployed system: after that time, all the node that are not rebooted on the deployed environment are considered as failed and the deployment ends.
.IP "\fBdeployment_validity_timeout\fR 700" 4
.IX Item "deployment_validity_timeout 700"
Deployment timeout upper time boundary for a deployment to remain valid. Every longer deployment is considered as a failed one. This allows kadeploy to clean its database by itself.
.IP "\fBext2_options\fR \-b 4096 \-O sparse_super,filetype,resize_inode,dir_index" 4
.IX Item "ext2_options -b 4096 -O sparse_super,filetype,resize_inode,dir_index"
Options passed to mkfs when formatting a kadeploy target partition which has an ext2 filesystem, this allows to be five times faster than default mkfs values.
.IP "\fBext2_options\fR \-b 4096 \-O sparse_super,filetype,resize_inode,dir_index" 4
.IX Item "ext2_options -b 4096 -O sparse_super,filetype,resize_inode,dir_index"
Options passed to mkfs when formatting a kadeploy target partition which has an ext3 filesystem, this allows to be five times faster than default mkfs values.
.SH "NMAP CONFIGURATION"
.IX Header "NMAP CONFIGURATION"
Nmap is used by kadeploy to test the nodes'state.
.IP "\fBenable_nmap\fR 1" 4
.IX Item "enable_nmap 1"
1 enables nmap, 0 disables it.
.IP "\fBnmap_cmd\fR /usr/bin/nmap" 4
.IX Item "nmap_cmd /usr/bin/nmap"
nmap command on your deployment server.
.SH "PARALLEL COMMANDS"
.IX Header "PARALLEL COMMANDS"
This section describes tuning for parrallel commands launched by kadeploy.
.IP "\fBdeploy_rcmd\fR rsh \-l root" 4
.IX Item "deploy_rcmd rsh -l root"
Command launcher for the deployment kernel.
.IP "\fBprod_rcmd\fR ssh \-l root" 4
.IX Item "prod_rcmd ssh -l root"
Command launcher for the deployed environment (mainly to initiate reboots since \fBdeploy_user\fR should be authorized to log as root on all the deployed system on the nodes).
.IP "\fBlauncher_window_size\fR 25" 4
.IX Item "launcher_window_size 25"
Number of parrallel remote commands issued from the server during a single deployment. A smaller size mmeans more concurency between deployments. Kadeploy consumes up to 2 * min (launcher_window_size, number_of_implied_nodes) + 3 ports during a single deployment, if you multiply this by the number of maximum concurrent deployments on your system, you should not be able to reach 512. A value of 25 seems reasonable, since it allows 10 concurrents deployments at any time on the cluster.
.SH "DATABASE ACCESS"
.IX Header "DATABASE ACCESS"
This section specifies database acces for kadeploy.
.IP "\fBdeploy_db_host\fR server.domainname" 4
.IX Item "deploy_db_host server.domainname"
Database server name or \s-1IP\s0.
.IP "\fBdeploy_db_name\fR deploy" 4
.IX Item "deploy_db_name deploy"
Database name on the mysql server hosting kadeploy's tables.
.IP "\fBdeploy_db_login\fR deploy" 4
.IX Item "deploy_db_login deploy"
Login for data rw acces from the deployment server, ie the server kadeploy is installed on, on the database server.
.IP "\fBdeploy_db_psswd\fR deploy" 4
.IX Item "deploy_db_psswd deploy"
Password associated to the previous login.
.SH "PREINSTALL POSTINSTALL"
.IX Header "PREINSTALL POSTINSTALL"
This section deals with deployment specific operations: preinstall and postinstall. The preinstall is specific to a cluster: it deals with harddisk preparation before initiating the deployment procedure. It consits of a tgz archive containing a script and everything it requires to prepare the disk (load disk drivers, manage partitions creation, format common partitions). Since it is specific to a site, it is the role of the sysadmin to manage it. At the other end of the deployment, the postinstall is specific to the deployed environment, it is up to the environments' maintainers to take care of those.
.IP "\fBpre_install_archive\fR /usr/local/share/kadeploy/preinstall.tgz" 4
.IX Item "pre_install_archive /usr/local/share/kadeploy/preinstall.tgz"
Common preinstall for the all the nodes of the cluster kadeploy should take care of.
.IP "\fBpre_install_script\fR init.ash" 4
.IX Item "pre_install_script init.ash"
Relative path of the preintall script from the preinstall root directory.
.IP "\fBpre_install_script_timeout\fR 50" 4
.IX Item "pre_install_script_timeout 50"
Timeout for preinstall execution in seconds, this is the maximum time allowed for the preinstall execution on 1 node, timeout nodes are discarted from the rest of the deployment process.
.IP "\fBpost_install_script\fR traitement.ash" 4
.IX Item "post_install_script traitement.ash"
Relative path of the postinstall script from the postinstall root directory.
.SH "PXE CONFIGURATION"
.IX Header "PXE CONFIGURATION"
This sections details the \s-1TFTP\s0 part of kadeploy that allows it to control the way the nodes are booting.
.IP "\fBkernel_param\fR console=tty0 console=ttyS0,38400n8" 4
.IX Item "kernel_param console=tty0 console=ttyS0,38400n8"
Kernel parameters passed to the deployment kernel: those allow to redirect console so a serial port linked to kvm capabilities.
.IP "\fBuse_nogrub\fR 1" 4
.IX Item "use_nogrub 1"
By default 0, this allows to use grub as a remote bootloader. This option is usefull if your system cannot deal with grub remote execution (Itanium nodes, some nodes with \s-1SCSI\s0 harddrives...). If enabled, you won't be able to boot freeBSD environements (or any environment based on dd images).
.IP "\fBtftp_repository\fR /var/lib/tftpboot/PXEClient/" 4
.IX Item "tftp_repository /var/lib/tftpboot/PXEClient/"
Specify the tftp repository for \s-1PXE\s0 clients as defined by your cluster \s-1DHCP\s0 server.
.IP "\fBpxe_rep\fR pxelinux.cfg/" 4
.IX Item "pxe_rep pxelinux.cfg/"
Relative path from the \fBtftp_repository\fR, where each node's \s-1PXE\s0 boot files are stored. Should be owned by \fBdeploy_user\fR.
.IP "\fBtftp_relative_path\fR images_grub" 4
.IX Item "tftp_relative_path images_grub"
Relative path from the \fBtftp_repository\fR, where kadeploy will put environments' specific files required to reboot the nodes on the target environment. Should be owned by \fBdeploy_user\fR.
.SH "LABEL"
.IX Header "LABEL"
This sections details the use of kadeploy labels to control the way the nodes are booting.
.IP "label_deploy = duke\-vmlinuz.x86_64:duke\-initrd.x86_64 ETH_DRV=tg3 ETH_DEV=eth0 console=tty0 console=ttyS0,38400n8 ramdisk_size=40000" 4
.IX Item "label_deploy = duke-vmlinuz.x86_64:duke-initrd.x86_64 ETH_DRV=tg3 ETH_DEV=eth0 console=tty0 console=ttyS0,38400n8 ramdisk_size=40000"
This label tells kadeploy to boot duke\-vmlinuz.x86_64 kernel with duke\-initrd.x86_64 passing the following arguments: ethernet driver is tg3, using the node's eth0 interface.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdeploy_cmd.conf\fR\|(1)
.SH "COPYRIGHTS"
.IX Header "COPYRIGHTS"
This software is licensed under the \s-1GNU\s0 Library General Public License. There is \s-1NO\s0 warranty; not even for \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
