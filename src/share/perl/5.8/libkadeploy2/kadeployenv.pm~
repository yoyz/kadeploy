package libkadeploy2::kadeployenv;
use strict;
use warnings;
use Getopt::Long;
use libkadeploy2::message;
use libkadeploy2::environment;
use libkadeploy2::deploy_iolib;
use libkadeploy2::deployconf;
use libkadeploy2::nodelist;
use libkadeploy2::command;
use libkadeploy2::sudo;
use libkadeploy2::karights;
use libkadeploy2::kachecknodes;
use libkadeploy2::time;

use libkadeploy2::deploymethod::dd;
use libkadeploy2::deploymethod::linux;
use libkadeploy2::deploymethod::windows;

sub get_options_cmdline();
sub check_options();
sub partitionlinuxnodes();
sub deploylinux();
sub deploypxelinux();
sub deploydd();
sub deploywindows();
sub setuppxelinux();
sub setuppxewindows();
sub setupgrubchainload();
sub check_necessary_right_or_exit($);
sub check_disk_partnumber();

my $message=libkadeploy2::message::new();
my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }
my $kadeploydir=$conf->get("kadeploy2_directory");
my $db=libkadeploy2::deploy_iolib::new();

my $ddpath=$conf->getpath_cmd("environment_dd");
my $linuxpath=$conf->getpath_cmd("environment_linux");
my $windowspath=$conf->getpath_cmd("environment_windows");

my $kachecknodes=$conf->getpath_cmd("kachecknodes");
my $kapxe=$conf->getpath_cmd("kapxe");
my $kapart=$conf->getpath_cmd("kapart");

my @node_list;
my $disknumber=$conf->get("default_disk_number");
my $disknumbercmdline;
my $partnumber=$conf->get("default_partition_number");
my $partnumbercmdline;
my $slice;

my $login="";
my $help;
my $verbose=0;
my $envname="";
my $environment;
my $nodelist;
my $basefile;
my $partitionfile;
my $node;
my $refnodelist;
my $cmd;
my $sudo_user;
my $ok=1;
my $envfile;
my $timedeploy;
my $pxetype="";
my $bootfromdisk=0;
my $bootfromnetwork=0;

sub run()
{
    if (! check_options()) { return 1; }
    
    $timedeploy=libkadeploy2::time::new();
    $timedeploy->start();

    $environment=libkadeploy2::environment::new();
    $environment->set_name($envname);
    $environment->set_user($login);    
    
    if (! $environment->get_descriptionfile_fromdb()) { $message->message(2,"Environment not registred in db...");    return 1; }
    if (! $environment->load())                       { $message->erroropeningfile(2,$environment->get_descriptionfile()); return 1; 	}
    if (! $environment->is_set("deploytype"))         { $message->message(2,"Your configuration file doesn't contain deploytype"); return 1; 	}
    $envfile=$environment->get_descriptionfile();

    check_necessary_right_or_exit("PXE");

    if (! check_envfile()) { $message->message(2,"envfile error : ".$environment->get_name()); return 0; }

    
#Check nodes if deploytype != PXE
    if (! ($environment->get("deploytype") =~/^pxe.+/))
    {
	my $kachecknodes;
	my @icmptype=("ICMP");
	my @sshtype=("SSH");
	my @mcattype=("MCAT");

	if (( ! $partnumbercmdline) && (! $environment->is_set("partnumber")))
	{
	    $message->message(2,"no partnumber defined");
	    return 1;
	}
	if (! $environment->is_set("pxetype"))
	{
	    $message->message(2,"pxetype not set in your envfile... can't setup pxe");
	    return 1;
	}

	if ($environment->is_set("partitionfile"))
	{ check_necessary_right_or_exit("DISK$disknumber");   }
	check_necessary_right_or_exit("DISK".$disknumber."_PART".$partnumber);   
	check_disk_partnumber();

	$kachecknodes=libkadeploy2::kachecknodes::new();
	$kachecknodes->set_check();
	$kachecknodes->set_type_list(\@icmptype);
	$kachecknodes->set_retry(50);
	$kachecknodes->set_sleeptime(10);
	$kachecknodes->set_nodelist($nodelist);
	if ($kachecknodes->run()!=0) { $message->message(2,"check @icmptype, node not found... (".$nodelist->get_str().")"); return 0; }

	$kachecknodes=libkadeploy2::kachecknodes::new();
	$kachecknodes->set_check();
	$kachecknodes->set_type_list(\@sshtype);
	$kachecknodes->set_retry(10);
	$kachecknodes->set_sleeptime(10);
	$kachecknodes->set_nodelist($nodelist);
	if ($kachecknodes->run()!=0) { $message->message(2,"check @sshtype, node not found... (".$nodelist->get_str().")"); return 0; }

	$kachecknodes->set_check();
	$kachecknodes->set_type_list(\@mcattype);
	$kachecknodes->set_retry(3);
	$kachecknodes->set_sleeptime(10);
	$kachecknodes->set_nodelist($nodelist);
	if ($kachecknodes->run()!=0) { $message->message(2,"check @mcattype node not found... (".$nodelist->get_str().")"); return 0; }

	$db->connect();
	
	$refnodelist=$nodelist->get_nodes();
	@node_list=@$refnodelist;
	foreach $node (@node_list)
	{
	    if (! ($db->get_nodestate($node->get_name(),"MCAT") eq "UP"))
	    {
		$message->message(1,"mcat service for node ".$node->get_name()." is not up"); 
		$nodelist->del($node->get_ip());
	    }
	}
	$db->disconnect();
	if ($nodelist->get_numberofnode() == -1)
	{
	    $message->message(2,"There isn't any node...");
	    return 1;
	}

	#PARTITIONING
	$partitionfile=$environment->get("partitionfile");
	
	if (! $partitionfile)    
	{
	    $message->message(0,"Trying without parititioning nodes ".$nodelist->get_str());
	}
	else
	{	    
	    $message->message(0,"Partitioning nodes ".$nodelist->get_str()." whith file $partitionfile");
	    $ok=partitionlinuxnodes();
	    if (! $ok) 
	    { 
		$message->message(2,"fail to partition some nodes....");
		return 1; 
	    }
	} 
	$ok=deploy($environment->get("deploytype"));
	if ($ok) 
	{ 
	    $message->message(0,"Setup pxe for ".$nodelist->get_str());
	    if (!confsetuppxe($environment->get("deploytype"))) { $message->message(2,"Something wrong in your environment file"); $ok=0; }
	    $ok=setuppxe();
	}	
    }
    
    if ($environment->get("deploytype") =~ /^pxe.+/)
    { 	    
	if (!confsetuppxe($environment->get("deploytype"))) { $message->message(2,"Something wrong in your environment file"); $ok=0; }
	if ($ok) { $ok=setuppxe(); }
    }
       
    if ($ok)
    { 
	$message->message(0,"Deployment success with ".$nodelist->get_str()); 
	$message->message(-1,"Deployment time ".int($timedeploy->stop())."s");
	return 0; 
    }
    else
    { 
	$message->message(2,"Deployment failed with ".$nodelist->get_str());  
	$message->message(-1,"Deployment time ".int($timedeploy->stop())."s");
	return 1;
    }
}

################################################################################

sub set_login($)      { my $arg=shift; $login=$arg;       }
sub set_disknumber($) { my $arg=shift; $disknumber=$arg;  }
sub set_partnumber($) { my $arg=shift; $partnumber=$arg;  }
sub set_envname($)    { my $arg=shift; $envname=$arg;     }
sub set_node_list($)  { my $arg=shift; @node_list=@$arg;  }


sub get_options_cmdline()
{
    GetOptions(
	       'm=s'                  => \@node_list,
	       'machine=s'            => \@node_list,
	       
	       'disknumber=s'         => \$disknumbercmdline,
	       'd=s'                  => \$disknumbercmdline,
	       'partnumber=s'         => \$partnumbercmdline,
	       'p=s'                  => \$partnumbercmdline,
	       
	       'login=s'              => \$login,
	       'l=s'                  => \$login,
	       
	       'environment=s'        => \$envname,
	       'e=s'                  => \$envname,
	       
	       'h!'                   => \$help,
	       'help!'                => \$help,
	       'v!'                   => \$verbose,
	       'verbose!'             => \$verbose,
	       );
}

sub check_envfile()
{
    if (($environment->get("deploytype") eq "windows") &&
	(! $environment->is_set("windowsdirectory")))
    { $message->message(2,"Your environment file doesn't contain windowsdirectory"); return 0;    }
    
    if ($environment->get("deploytype") eq "linux" &&
	(! $environment->is_set("postinstall") ) )
	{ $message->message(2,"Your environment file doesn't contain postinstall"); return 0;    }

    return 1;
}

sub check_options()
{
    if ($help) { $message->kadeployenv_help(); exit 0; }

    foreach my $arg (@ARGV) { if ($arg =~ /([a-zA-Z0-9_]+)@([a-zA-Z0-9\._]+)/) { $login=$1; $envname=$2; } }

    if (@node_list)     
    { $nodelist=libkadeploy2::nodelist::new(); $nodelist->loadlist(\@node_list);  }
    else { $message->missing_node_cmdline(2); return 0; }

    if (! $login)                   { $message->missing_cmdline(2,"user name needed"); return 0; }
    if (! $envname)                 { $message->missing_cmdline(2,"environment name needed"); return 0; }    
    return 1;
}

sub check_disk_partnumber()
{
    if (! $disknumber)              { $message->missing_cmdline(2,"disknumber needed"); return 1; }
    if (! $partnumber)              { $message->missing_cmdline(2,"partnumber needed"); return 1; }
    if (! ($disknumber =~ /^\d+$/)) { $message->missing_cmdline(2,"partnumber is a number begining at 1"); return 1; }
    if (! ($partnumber =~ /^\d+$/)) { $message->missing_cmdline(2,"partnumber is a number begining at 1"); return 1; }    
}

sub check_necessary_right_or_exit($)
{
    my $righttocheck=shift;
    if (!check_rights($righttocheck)) { $message->notenough_right(2,"user:".$sudo_user." right:".$righttocheck." node:".$nodelist->get_str()); return 1; }
    return 1;
}

sub check_rights($)
{
    my $righttocheck=shift;
    $sudo_user=libkadeploy2::sudo::get_sudo_user();
    if (! $sudo_user) { $sudo_user=libkadeploy2::sudo::get_user(); }
    my $ok=0;
    if ( $sudo_user eq "root" ||
	 $sudo_user eq $conf->get("deploy_user")
	 )
    {
	$ok=1;
    }
    if (libkadeploy2::karights::check_rights(
				      $nodelist,
				      "$righttocheck"))
    {
	$ok=1;
    }	
    return $ok;
}


sub partitionlinuxnodes()
{
    my $cmd;
    my $command;
    $cmd=$kapart." ".
	$nodelist->get_cmdline()." ".
	" --disknumber ".$disknumber.
	" --ostype linux ".
	" --partitionfile ".$partitionfile
	;
    
    $command=libkadeploy2::command::new($cmd,
					60,
					$verbose
					);
#    $command->exec();
#    return $command->get_status();
    return 1;
}


sub deploy($)
{
    my $deploytype=shift;
    my $deploy;
    my @node_list;
    @node_list=$nodelist->get_nodes();


    if    ($deploytype eq "linux")
    { 	$deploy=libkadeploy2::deploymethod::linux::new();       }
    elsif ($deploytype eq "dd")
    {   $deploy=libkadeploy2::deploymethod::dd::new();          }
    elsif ($deploytype eq "windows")  
    {   $deploy=libkadeploy2::deploymethod::windows::new();     }
    else
    {   $message->message(2,"deploymethod not found... kadeployenv::deploy($)"); exit 1;    }

    if ($environment->is_set("partnumber")) { $partnumber=$environment->get("partnumber"); }
    else { $partnumber=$partnumbercmdline; }
    $deploy->set_nodelist($nodelist);
    $deploy->set_partnumber($partnumber);
    $deploy->set_disknumber($disknumber);
    $deploy->set_envfile($envfile);
    $deploy->set_partitionfile($partitionfile);
    if ($verbose) { $deploy->set_verbose(); }

    $message->message(0,"Begin deployment ".$deploytype." with ".$nodelist->get_str());
    if ($deploy->run()==0) { return 1; }
}


sub confsetuppxe($)
{
    my $deploytype=shift;
    
    if ($environment->is_set("bootfromdisk") &&
	$environment->is_set("bootfromtftp"))
    {
	$message->message(2,"bootfromdisk & bootfromtftp mutualy exclusive !!!");
	return 0;
    }
    

    if ($deploytype =~ /^pxelinux$/   ||	
	$deploytype =~ /^pxegrub$/    ||
	$deploytype =~ /^pxeopenbsd$/
	) 
    { 
	$bootfromnetwork=1; 
	$pxetype=$deploytype;
    }
    elsif ($deploytype =~ /^pxe.+/)
    {
	$bootfromdisk=1; 
	$pxetype=$deploytype;
    }
    else
    {       
	$pxetype=$environment->get("pxetype");
	if ($pxetype =~ /^pxelinux$/   ||	
	    $pxetype =~ /^pxegrub$/    ||
	    $pxetype =~ /^pxeopenbsd$/
	    ) 
	{ 
	    $bootfromnetwork=1; 
	}
	elsif ($deploytype =~ /^pxe.+/)
	{
	    $bootfromdisk=1; 
	}
    }
    return 1;
}


sub setuppxe()
{
    my $command;
    my $deploytype=$environment->get("deploytype");
    my $bootfrom="";

    if ($bootfromnetwork)
    { $bootfrom=" --fromtftp"; }
    elsif ($bootfromdisk)
    { $bootfrom=" --fromdisk"; }
    

    $cmd="$kapxe ".$nodelist->get_cmdline().
	" --type ".$pxetype;


    if ($disknumbercmdline)
    { 	$cmd.=" --disknumber $disknumbercmdline"; }
    if ($partnumbercmdline)
    { 	$cmd.=" --partnumber $partnumbercmdline"; }
    elsif ($environment->is_set("partnumber"))
    {   $cmd.=" --partnumber ".$environment->get("partnumber"); }


    if ($environment->is_set("kernel"))
    { $cmd.=" --kernel ".$environment->get("kernel"); }
      
    if ($environment->is_set("initrd"))
    { $cmd.=" --initrd ".$environment->get("initrd"); }

    if ($environment->is_set("module"))
    { $cmd.=" --module ".$environment->get("module"); }

    if ($environment->is_set("kernelparams"))
    { $cmd.=" --kernelparams ".$environment->get("kernelparams"); }

    if ($environment->is_set("windowsdirectory"))
    { $cmd.=" --windowsdirectory ".$environment->get("windowsdirectory");     }
    
    $cmd.=" $bootfrom";
	
    if ($verbose) { $cmd.=" -v"; }

    $command=libkadeploy2::command::new($cmd,
					50,
					$verbose);
    $command->exec();
    return $command->get_status();

}

    1;
