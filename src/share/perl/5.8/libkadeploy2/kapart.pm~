package libkadeploy2::kapart;

use strict;
use warnings;
use POSIX;
use libkadeploy2::cmdline;
use libkadeploy2::message;
use libkadeploy2::command;
use libkadeploy2::nodelist;
use libkadeploy2::remoteparallelcommand;
use libkadeploy2::disk;
use libkadeploy2::device;
use libkadeploy2::disks;
use Getopt::Long;

sub get_options();
sub check_options();
sub kapart($);

my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }

my $message=libkadeploy2::message::new();


my @node_list;
my $partitionfile;
my $disknumber;
my $partnumber;
my $disktype;
my $ostype;
my $help;
my $command;
my $cmd;
my $hostfile;
my $nodelist;
my $nodeshell;
my $verbose=0;
my $printfdisk;
my $printfstab;
my $dofdisk;

my $kadeploydir=$conf->get("kadeploy2_directory");
my $kamcat=$conf->getpath_cmd("kamcat");
my $kasetup=$conf->getpath_cmd("kasetup");
my $kanodes=$conf->getpath_cmd("kanodes");

################################################################################

sub new()
{
    my $self;
    $self=
    {
	node_list       => 0,
	nodelist        => 0,
	partitionfile   => "",

	disknumber      => 0,
	partnumber      => 0,

	ostype          => "linux",
	
	fdisk           => 0,
	printfdisk      => 0,
	printfstab      => 0,
    };
    bless $self;
    return $self;
}

sub run()
{
    if (! check_options()) { return 1; }
    return kapart($nodelist);
}


sub get_options_cmdline()
{
    GetOptions(
	       'm=s'                  => \@node_list,
	       'machine=s'            => \@node_list,
	       #'connector=s'          => \$connector,
	       
	       'partitionfile=s'      => \$partitionfile,
	       
	       'disknumber=s'         => \$disknumber,
	       'partnumber=s'         => \$partnumber,	      

	       'ostype=s'             => \$ostype,
	       
	       'fdisk!'               => \$dofdisk,
	       'printfdisk!'          => \$printfdisk,
	       'printfstab!'          => \$printfstab,

	       'v!'                   => \$verbose,
	       'verbose!'             => \$verbose,

	       'h!'                   => \$help,
	       'help!'                => \$help,
	       );
    return 1;
}

sub check_options()
{    
    if ($help) { $message->kapart_help(); exit 0;     }

    if ($hostfile) 
    { 
	$nodelist=libkadeploy2::cmdline::loadhostfileifexist($hostfile); 
    }
    if (@node_list) 
    { 
	$nodelist=libkadeploy2::cmdline::loadhostcmdlineifexist(\@node_list); 
    }       
    
    if (! $disknumber)        { $message->missing_cmdline(2,"disknumber"); $message->kapart_help(); return 0; }
    if (! $ostype)            { $message->missing_cmdline(2,"ostype"); return 0; }
    if (! $partitionfile)     { $message->missing_cmdline(2,"partitionfile"); return 0; }
    if (! @node_list)         { $message->missing_node_cmdline(2); return 0; }
    if (! -f $partitionfile)  { $message->filenotfound(2,$partitionfile); return 0; }    
    if ((! $dofdisk) && 
	(! $printfdisk) &&
	(! $printfstab))
    {
	$message->message(2,"fdisk, printfdisk, printfstab mutualy exclusive");
	return 0;
    }
    if ($dofdisk || $printfdisk || $printfstab)
    {
	$message->message(2,"choose a flags");
	return 0;
    }
    return 1;
}

sub kapart($)
{
    my $nodelist=shift;
    my $ok=1;
    my $ref_node_list;
    my @node_list;
    my $node;
    my $remoteparallelcommand;
    my $nodename;
    my $i;
    my $device;
    my $linuxdev;
    my $disk;
    my $disks;


    $disks=libkadeploy2::disks::new($nodelist);
    if (! $disks->check_disk_type($disknumber)) { return 1; }

    $disktype=$disks->get_disk_type($disknumber);

    $cmd="$kamcat --login root --servercommand \"$kasetup --printvalidfdisk --partitionfile $partitionfile\" --clientcommand \" cat > /tmp/fdisk.txt\" ";
    $cmd.=libkadeploy2::cmdline::get_nodes_cmdline($nodelist);  
    
    $command=libkadeploy2::command::new(
					$cmd,
					30,
					$verbose
					);


    if (! $command->exec()) { $ok=0; }
    else 
    { 
	$cmd="$kanodes --add --partitionfile";
    


	$device=libkadeploy2::device::new("$disktype",$disknumber,0);
	$linuxdev=$device->get_linux();


	$cmd="\"umount /mnt/dest\"";
	$remoteparallelcommand=libkadeploy2::remoteparallelcommand::new(
								    "ssh",
								    "internal",
								    "root",
								    $nodelist,
								    $cmd,
								    30,
								    1
								    );								   
	$remoteparallelcommand->exec();

	$cmd="\"cat /tmp/fdisk.txt \| fdisk /dev/$linuxdev\"";
	$remoteparallelcommand=libkadeploy2::remoteparallelcommand::new(
								    "ssh",
								    "internal",
								    "root",
								    $nodelist,
								    $cmd,
								    30,
								    1
								    );
	if (! $remoteparallelcommand->exec()) { $ok=0;   }
    }						    

    
    
    if ($ok)
    {
	$message->message(0,"Partition done for node ".$nodelist->get_str());
	return 0;
    }
    else
    {
	$message->message(2,"Partition failed for node ".$nodelist->get_str());
	return 1;
    }
}

sub printfdisk($)
{
    my $partitionfile=shift;
    my $disk;	
    my $fdiskscript;
    $disk=libkadeploy2::disk::new();
    $fdiskscript=libkadeploy2::fdiskscript::new();
    $disk->loadpartitionfile($partitionfile);
    $fdiskscript->set_disk($disk);
    return $fdiskscript->print();
}

sub printfstab($$)
{
    my $partitionfile=shift;
    my $diskinterface=shift;
    my $disk;
    my $fstab;
    $disk=libkadeploy2::disk::new();
    $disk->loadpartitionfile($partitionfile);
    $disk->set_interface($diskinterface); 
    $fstab=libkadeploy2::fstab::new();
    $fstab->set_disk($disk);
    $fstab->set_disknumber(1);
    $fstab->set_partnumber(1);
    print $fstab->get("linux");
}




1;
