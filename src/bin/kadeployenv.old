#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use libkadeploy2::message;
use libkadeploy2::environment;
use libkadeploy2::deploy_iolib;
use libkadeploy2::deployconf;
use libkadeploy2::nodelist;
use libkadeploy2::command;
use libkadeploy2::sudo;
use libkadeploy2::karights;

sub get_options_cmdline();
sub check_options();
sub partitionlinuxnodes();
sub deploylinux();
sub deploypxelinux();
sub deploydd();
sub deploywindows();
sub setuppxelinux();
sub setuppxewindows();
sub setupgrubchainload();
sub check_necessary_right_or_exit($);
sub check_disk_partnumber();

my $message=libkadeploy2::message::new();
my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }
my $kadeploydir=$conf->get("kadeploy2_directory");
my $db=libkadeploy2::deploy_iolib::new();

my $ddpath=$conf->getpath_cmd("environment_dd");
my $linuxpath=$conf->getpath_cmd("environment_linux");
my $windowspath=$conf->getpath_cmd("environment_windows");

my $kachecknodes=$conf->getpath_cmd("kachecknodes");
my $kapxe=$conf->getpath_cmd("kapxe");
my $kapart=$conf->getpath_cmd("kapart");

my @node_list;
my $disknumber=$conf->get("default_disk_number");
my $partnumber=$conf->get("default_partition_number");
my $login;
my $help;
my $verbose=0;
my $envname;
my $environment;
my $nodelist;
my $basefile;
my $partitionfile;
my $node;
my $refnodelist;
my $cmd;
my $sudo_user;
my $ok=1;
my $envfile;

get_options_cmdline();
check_options();

$environment=libkadeploy2::environment::new();
$environment->set_name($envname);
$environment->set_user($login);    

if (! $environment->get_descriptionfile_fromdb()) { $message->message(2,"Environment not registred in db...");    exit 1; }
if (! $environment->load())                       { $message->erroropeningfile(2,$environment->get_descriptionfile()); exit 1; 	}
if (! $environment->get_info("deploytype"))       { $message->message(2,"Your configuration file doesn't contain deploytype"); exit 1; 	}
$envfile=$environment->get_descriptionfile();

if (
    $environment->get_info("deploytype") eq "linux" || 
    $environment->get_info("deploytype") eq "windows" || 
    $environment->get_info("deploytype") eq "dd" 
    )
{
    check_necessary_right_or_exit("DISK".$disknumber."_PART".$partnumber);   
    check_necessary_right_or_exit("PXE");
    check_disk_partnumber();
}




#Check nodes if deploytype != PXE
if (! ($environment->get_info("deploytype") eq "pxelinux"))
{
    system("$kachecknodes --check --type ICMP --retry 50 ".$nodelist->get_cmdline());
    system("$kachecknodes --check --type SSH  --retry 10 ".$nodelist->get_cmdline());
    system("$kachecknodes --check --type MCAT ".$nodelist->get_cmdline());
    $db->connect();

    $refnodelist=$nodelist->get_nodes();
    @node_list=@$refnodelist;	
    foreach $node (@node_list)
    {
	if (! ($db->get_nodestate($node->get_name(),"MCAT") eq "UP"))
	{
	    $message->message(1,"mcat service for node ".$node->get_name()." is not up");
	    $nodelist->del($node->get_ip());
	}
    }
    $db->disconnect();
    if ($nodelist->get_numberofnode() == -1)
    {
	$message->message(2,"There isn't any node...");
	exit 1;
    }
}


if ($environment->get_info("deploytype") eq "pxelinux")
{
    check_necessary_right_or_exit("PXE");   
    $ok=deploypxelinux();
    if ($ok) { exit 0; } else { exit 1; }
}

$partitionfile=$environment->get_info("partitionfile");

if (! $partitionfile)    
{
    $message->message(0,"Trying without parititioning nodes ".$nodelist->get_str());
}
else
{
    check_necessary_right_or_exit("DISK$disknumber");   
    $message->message(0,"Partitioning nodes ".$nodelist->get_str()." whith file $partitionfile");
    $ok=partitionlinuxnodes();
    if (! $ok) 
    {   #Bugs on setting mcatseg
	$message->message(1,"Retrying command on ".$nodelist->get_str());
	$ok=partitionlinuxnodes(); 
    }
    if (! $ok) 
    { 
	$message->message(2,"fail to partition some nodes....");
	exit 1; 
    }
} 
    


if ($environment->get_info("deploytype") eq "linux")
{
    $message->message(0,"Begin deployment linux with ".$nodelist->get_str());
    $ok=deploylinux();
    if ($ok) { $ok=setuppxelinux(); }
}
elsif ($environment->get_info("deploytype") eq "dd")
{
    $message->message(0,"Begin deployment dd with ".$nodelist->get_str());
    $ok=deploydd();
    if ($ok) 
    { 
	$message->message(0,"Setup pxe with ".$nodelist->get_str());
	$ok=setupgrubchainload();
    }
}
elsif ($environment->get_info("deploytype") eq "windows")
{
    $message->message(0,"Begin deployment windows with ".$nodelist->get_str());
    $ok=deploywindows();
    if ($ok)
    {
	$message->message(0,"Setup pxe with ".$nodelist->get_str());
	$ok=setuppxewindows();
    }
}


if ($ok)
{ $message->message(0,"Deployment success with ".$nodelist->get_str()); exit 0; }
else
{ $message->message(2,"Deployment failed with ".$nodelist->get_str());  exit 1; }

################################################################################

sub get_options_cmdline()
{
    GetOptions(
	       'm=s'                  => \@node_list,
	       'machine=s'            => \@node_list,
	       
	       'disknumber=s'         => \$disknumber,
	       'd=s'                  => \$disknumber,
	       'partnumber=s'         => \$partnumber,
	       'p=s'                  => \$partnumber,
	       
	       'login=s'              => \$login,
	       'l=s'                  => \$login,
	       
	       'environment=s'        => \$envname,
	       'e=s'                  => \$envname,
	       
	       'h!'                   => \$help,
	       'help!'                => \$help,
	       'v!'                   => \$verbose,
	       'verbose!'             => \$verbose,

	       );
}

sub check_options()
{
    if ($help) { $message->kadeployenv_help(); exit 0; }

    foreach my $arg (@ARGV) { if ($arg =~ /([a-zA-Z0-9_]+)@([a-zA-Z0-9\._]+)/) { $login=$1; $envname=$2; } }

    if (@node_list)     { $nodelist=libkadeploy2::nodelist::new(); $nodelist->loadlist(\@node_list);  }
    else { $message->missing_node_cmdline(2); exit 1; }

    if (! $login)                   { $message->missing_cmdline(2,"user name needed"); exit 1; }
    if (! $envname)                 { $message->missing_cmdline(2,"environment name needed"); exit 1; }

}

sub check_disk_partnumber()
{
    if (! $disknumber)              { $message->missing_cmdline(2,"disknumber needed"); exit 1; }
    if (! $partnumber)              { $message->missing_cmdline(2,"partnumber needed"); exit 1; }
    if (! ($disknumber =~ /^\d+$/)) { $message->missing_cmdline(2,"partnumber is a number begining at 1"); exit 1; }
    if (! ($partnumber =~ /^\d+$/)) { $message->missing_cmdline(2,"partnumber is a number begining at 1"); exit 1; }    
}

sub check_necessary_right_or_exit($)
{
    my $righttocheck=shift;
    if (!check_rights($righttocheck)) { $message->notenough_right(2,"user:".$sudo_user." right:".$righttocheck." node:".$nodelist->get_str()); exit 1; }
    return 1;
}

sub check_rights($)
{
    my $righttocheck=shift;
    $sudo_user=libkadeploy2::sudo::get_sudo_user();
    if (! $sudo_user) { $sudo_user=libkadeploy2::sudo::get_user(); }
    my $ok=0;
    if ( $sudo_user eq "root" ||
	 $sudo_user eq $conf->get("deploy_user")
	 )
    {
	$ok=1;
    }
    if (libkadeploy2::karights::check_rights(
				      $nodelist,
				      "$righttocheck"))
    {
	$ok=1;
    }	
    return $ok;
}


sub partitionlinuxnodes()
{
    my $cmd;
    my $command;
    $cmd=$kapart." ".
	$nodelist->get_cmdline()." ".
	" --disknumber ".$disknumber.
	" --ostype linux ".
	" --loadpartitionfile ".$partitionfile
	;
    
    $command=libkadeploy2::command::new($cmd,
					60,
					$verbose
					);
    $command->exec();
    return $command->get_status();
}


#kapxe -type pxelinux -kernel linuxdeploy/myvmlinuz -initrd linuxdeploy/sid.img  -m cls1.mycluster.net --kernel-params ramdisk_size=150000
sub deploypxelinux()
{
    my $cmd;
    my $command;
    $cmd=$kapxe." ".
	$nodelist->get_cmdline()." ".
	" --type pxelinux ".
	" --kernel ".$environment->get_info("kernel").
	" --initrd ".$environment->get_info("initrd");
    if ($disknumber) { $cmd.=" --disknumber $disknumber"; }
    if ($partnumber) { $cmd.=" --partnumber $partnumber"; }
    if ($environment->get_info("kernelparams")) 
    { 
	$cmd.=" --kernelparams ".$environment->get_info("kernelparams");
    }
    
    $command=libkadeploy2::command::new($cmd,
					20,
					$verbose
					);
    $command->exec();
    return $command->get_status();
}



sub deploydd()
{
#	$environment->print_descriptionfile();
    $cmd="perl $ddpath ".$nodelist->get_cmdline().
	" --disknumber ".$disknumber.
	" --partnumber ".$partnumber.
	" --envfile ".$envfile;
    if ($verbose) { $cmd.=" -v"; }
    my $command=libkadeploy2::command::new($cmd,
					   600,
					   $verbose);
    $command->exec();
    return $command->get_status();
}

sub deploylinux()
{
#	$environment->print_descriptionfile();
    #linuxdeploy  -m cls1 --disknumber 1 --partnumber 2 --basefile envref/envref.tgz
    $cmd="perl $linuxpath ".$nodelist->get_cmdline().
	" --disknumber ".$disknumber.
	" --partnumber ".$partnumber.
	" --envfile    ".$envfile;
    if ($verbose) { $cmd.=" -v"; }
    my $command=libkadeploy2::command::new($cmd,
					   600,
					   $verbose);
    $command->exec();
    return $command->get_status();
}

sub deploywindows()
{
#	$environment->print_descriptionfile();
    $cmd="perl $windowspath ".$nodelist->get_cmdline().
	" --disknumber ".$disknumber.
	" --partnumber ".$partnumber.
	" --envfile ".$envfile;
    if ($verbose) { $cmd.=" -v"; }
    my $command=libkadeploy2::command::new($cmd,
					   600,
					   $verbose);
    $command->exec();
    return $command->get_status();
}



sub setuppxelinux()
{
    $cmd="$kapxe ".$nodelist->get_cmdline().
	" --type pxelinux --partnumber $partnumber";

    if ($environment->get_info("kernel"))
    { $cmd.=" --kernel ".$environment->get_info("kernel"); }
      
    if ($environment->get_info("initrd"))
    { $cmd.=" --initrd ".$environment->get_info("initrd"); }

    if ($environment->get_info("kernelparams"))
    { $cmd.=" --kernelparams ".$environment->get_info("kernelparams"); }


    if ($verbose) { $cmd.=" -v"; }
    my $command=libkadeploy2::command::new($cmd,
					   50,
					   $verbose);
    $command->exec();
    return $command->get_status();
}

sub setupgrubchainload()
{
    $cmd="$kapxe ".$nodelist->get_cmdline().
	" --type grub --kernel chainload ";
      
    
#    if ($environment->get_info("kernelparams"))
#    { $cmd.=" --partnumber $partnumber"; }

    if ($partnumber)
    { $cmd.=" --partnumber $partnumber"; }
    if ($verbose) { $cmd.=" -v"; }
    my $command=libkadeploy2::command::new($cmd,
					   50,
					   $verbose);
    $command->exec();
    return $command->get_status();
}


sub setuppxewindows()
{
    $cmd="$kapxe ".$nodelist->get_cmdline().
	" --type windows -p $partnumber";
    if ($environment->get_info("windowsbootdirectory"))
    {
	$cmd.=" --windowsbootdirectory ".$environment->get_info("windowsbootdirectory");
    }
    
    if ($verbose) { $cmd.=" -v"; }
    my $command=libkadeploy2::command::new($cmd,
					   50,
					   $verbose);
    $command->exec();
    return $command->get_status();
}

